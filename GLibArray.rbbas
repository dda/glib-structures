#tag ClassProtected Class GLibArray	#tag Method, Flags = &h0		Sub Append(v As Variant)		  'GArray * g_array_append_vals (GArray *array, gconstpointer data, guint len);		  		  Declare Function g_array_append_vals Lib GLib (myArray As Ptr, data As Ptr, len As Integer) As Ptr		  		  Dim mb As MemoryBlock		  		  Select Case myType		  Case kArrayTypeString		    mb=New MemoryBlock(mySize)		    mb.CString(0)=v.StringValue		    		  Case kArrayTypeInteger		    mb=New MemoryBlock(mySize)		    mb.Int32Value(0)=v.Int32Value		    		  Case kArrayTypeSingle		    mb=New MemoryBlock(mySize)		    mb.SingleValue(0)=v.SingleValue		    		  Case kArrayTypeDouble		    mb=New MemoryBlock(mySize)		    mb.DoubleValue(0)=v.DoubleValue		    		  Case kArrayTypeUint64		    mb=New MemoryBlock(mySize)		    mb.UInt64Value(0)=v.UInt64Value		    		  Case kArrayTypeInt64		    mb=New MemoryBlock(mySize)		    mb.Int64Value(0)=v.Int64Value		    		  End Select		  		  GArrayInstance=g_array_append_vals(GArrayInstance, mb, 1)		  		  myCount=myCount+1		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(arrayType As Integer)		  'GArray * g_array_new (gboolean zero_terminated, gboolean clear_, guint element_size);		  		  Declare Function g_array_new Lib GLib (zeroTerminated As Boolean, clearElements As Boolean, elementSize As Integer) As Ptr		  		  myType=arrayType		  Select Case myType		  Case kArrayTypeString		    GArrayInstance=g_array_new(True, True, 65536)		    mySize=65536		  Case kArrayTypeInteger		    GArrayInstance=g_array_new(False, False, 4)		    mySize=4		  Case kArrayTypeSingle		    GArrayInstance=g_array_new(False, False, 4)		    mySize=4		  Case kArrayTypeDouble		    GArrayInstance=g_array_new(False, False, 8)		    mySize=8		  Case kArrayTypeUint64		    GArrayInstance=g_array_new(False, False, 8)		    mySize=8		  Case kArrayTypeInt64		    GArrayInstance=g_array_new(False, False, 8)		    mySize=8		  End Select		  		  		  initTypeDescs()		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Count() As Integer		  Return myCount		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Destructor()		  'gchar * g_array_free (GArray *array, gboolean free_segment);		  		  Declare Function g_array_free Lib GLib (myArray As Ptr, freeSegment As Boolean) As Ptr		  		  Dim mb As MemoryBlock		  		  mb=g_array_free(GArrayInstance, True)		  GArrayInstance=Nil		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Element(i As Integer) As Variant		  Dim mb As MemoryBlock		  Dim v As Variant		  		  mb=GArrayInstance.Ptr(0)		  		  Select Case myType		  Case kArrayTypeString		    v=GArrayInstance.Ptr(0).CString(mySize*i)		  Case kArrayTypeInteger		    v=GArrayInstance.Ptr(0).Int32Value(mySize*i)		  Case kArrayTypeSingle		    v=GArrayInstance.Ptr(0).SingleValue(mySize*i)		  Case kArrayTypeDouble		    v=GArrayInstance.Ptr(0).DoubleValue(mySize*i)		  Case kArrayTypeUint64		    v=GArrayInstance.Ptr(0).UInt64Value(mySize*i)		  Case kArrayTypeInt64		    v=GArrayInstance.Ptr(0).Int64Value(mySize*i)		  End Select		  		  Return v		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ElementSize() As Integer		  'guint               g_array_get_element_size            (GArray *array);		  		  Declare Function g_array_get_element_size Lib GLib (myArray As Ptr) As Integer		  		  Return g_array_get_element_size(GArrayInstance)		  		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub initTypeDescs()		  typeDescs.Append "Integer"		  typeDescs.Append "Single"		  typeDescs.Append "Double"		  typeDescs.Append "String"		  typeDescs.Append "UInt64"		  typeDescs.Append "Int64"		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Insert(v As Variant, idx As Integer)		  'GArray * g_array_insert_vals (GArray *array, guint index_, gconstpointer data, guint len);		  		  Declare Function g_array_insert_vals Lib GLib (myArray As Ptr, index_ As Integer, data As Ptr, len As Integer) As Ptr		  		  Dim mb As MemoryBlock		  		  Select Case myType		  Case kArrayTypeString		    mb=New MemoryBlock(mySize)		    mb.CString(0)=v.StringValue		    		  Case kArrayTypeInteger		    mb=New MemoryBlock(mySize)		    mb.Int32Value(0)=v.Int32Value		    		  Case kArrayTypeSingle		    mb=New MemoryBlock(mySize)		    mb.SingleValue(0)=v.SingleValue		    		  Case kArrayTypeDouble		    mb=New MemoryBlock(mySize)		    mb.DoubleValue(0)=v.DoubleValue		    		  Case kArrayTypeUint64		    mb=New MemoryBlock(mySize)		    mb.UInt64Value(0)=v.UInt64Value		    		  Case kArrayTypeInt64		    mb=New MemoryBlock(mySize)		    mb.Int64Value(0)=v.Int64Value		    		  End Select		  		  GArrayInstance=g_array_insert_vals(GArrayInstance, idx, mb, 1)		  		  myCount=myCount+1		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function NthElement(i As Integer) As Variant		  Dim v As Variant		  Dim mb As MemoryBlock		  		  'void *g_array_nth(GArray* t, guint a, guint i);		  		  Declare Function g_array_nth Lib GLib (myArray As Ptr, theSize As Integer, idx As Integer) As Ptr		  		  mb=g_array_nth(GArrayInstance, mySize, i)		  		  Select Case myType		  Case kArrayTypeString		    v=mb.Ptr(0).CString(mySize*i)		  Case kArrayTypeInteger		    v=mb.Ptr(0).Int32Value(mySize*i)		  Case kArrayTypeSingle		    v=mb.Ptr(0).SingleValue(mySize*i)		  Case kArrayTypeDouble		    v=mb.Ptr(0).DoubleValue(mySize*i)		  Case kArrayTypeUint64		    v=mb.Ptr(0).UInt64Value(mySize*i)		  Case kArrayTypeInt64		    v=mb.Ptr(0).Int64Value(mySize*i)		  End Select		  		  Return v		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Prepend(v As Variant)		  'GArray * g_array_prepend_vals (GArray *array, gconstpointer data, guint len);		  		  Declare Function g_array_prepend_vals Lib GLib (myArray As Ptr, data As Ptr, len As Integer) As Ptr		  		  Dim mb As MemoryBlock		  		  Select Case myType		  Case kArrayTypeString		    mb=New MemoryBlock(mySize)		    mb.CString(0)=v.StringValue		    		  Case kArrayTypeInteger		    mb=New MemoryBlock(mySize)		    mb.Int32Value(0)=v.Int32Value		    		  Case kArrayTypeSingle		    mb=New MemoryBlock(mySize)		    mb.SingleValue(0)=v.SingleValue		    		  Case kArrayTypeDouble		    mb=New MemoryBlock(mySize)		    mb.DoubleValue(0)=v.DoubleValue		    		  Case kArrayTypeUint64		    mb=New MemoryBlock(mySize)		    mb.UInt64Value(0)=v.UInt64Value		    		  Case kArrayTypeInt64		    mb=New MemoryBlock(mySize)		    mb.Int64Value(0)=v.Int64Value		    		  End Select		  		  GArrayInstance=g_array_prepend_vals(GArrayInstance, mb, 1)		  		  myCount=myCount+1		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Remove(idx As Integer)		  'GArray * g_array_remove_index (GArray *array, guint index_);		  		  Declare Function g_array_remove_index Lib GLib (myArray As Ptr, index As Integer) As Ptr		  		  GArrayInstance=g_array_remove_index(GArrayInstance, idx)		  		  myCount=myCount-1		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub RemoveRange(idx As Integer, number As Integer)		  'GArray * g_array_remove_range (GArray *array, guint index_, guint length);		  		  Declare Function g_array_remove_range Lib GLib (myArray As Ptr, index As Integer, num As Integer) As Ptr		  		  GArrayInstance=g_array_remove_range(GArrayInstance, idx, number)		  		  myCount=myCount-number		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Sort()		  'void g_array_sort (GArray *array, GCompareFunc compare_func);		  'Declare Sub g_array_sort Lib GLib (myArray As Ptr, func As Ptr)		  'g_array_sort(GArrayInstance, AddressOf SortFunc)		  		  'int g_array_sortInt(GArray *array)		  'int g_array_sortInt64(GArray *array)		  		  Declare Sub g_array_sortInt Lib GLib (myArray As Ptr)		  Declare Sub g_array_sortInt64 Lib GLib (myArray As Ptr)		  Declare Sub g_array_sortUInt64 Lib GLib (myArray As Ptr)		  Declare Sub g_array_sortDouble Lib GLib (myArray As Ptr)		  Declare Sub g_array_sortSingle Lib GLib (myArray As Ptr)		  Declare Sub g_array_sortString Lib GLib (myArray As Ptr)		  		  Select Case myType		  Case kArrayTypeString		    g_array_sortString(GArrayInstance)		    		  Case kArrayTypeInteger		    g_array_sortInt(GArrayInstance)		    		  Case kArrayTypeSingle		    g_array_sortSingle(GArrayInstance)		    		  Case kArrayTypeDouble		    g_array_sortDouble(GArrayInstance)		    		  Case kArrayTypeUint64		    g_array_sortUInt64(GArrayInstance)		    		  Case kArrayTypeInt64		    g_array_sortInt64(GArrayInstance)		    		  End Select		  		  		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Type(verbose As Boolean=False) As Variant		  		  if Not verbose Then Return myType		  Return typeDescs(myType)		  		End Function	#tag EndMethod	#tag Property, Flags = &h1		Protected GArrayInstance As MemoryBlock	#tag EndProperty	#tag Property, Flags = &h1		Protected myCount As Integer = 0	#tag EndProperty	#tag Property, Flags = &h1		Protected mySize As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected myType As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected typeDescs() As String	#tag EndProperty	#tag Constant, Name = Glib, Type = String, Dynamic = False, Default = \"/tmp/libglib-2.0.0.dylib", Scope = Public	#tag EndConstant	#tag Constant, Name = kArrayTypeDouble, Type = Double, Dynamic = False, Default = \"2", Scope = Public	#tag EndConstant	#tag Constant, Name = kArrayTypeInt64, Type = Double, Dynamic = False, Default = \"5", Scope = Public	#tag EndConstant	#tag Constant, Name = kArrayTypeInteger, Type = Double, Dynamic = False, Default = \"0", Scope = Public	#tag EndConstant	#tag Constant, Name = kArrayTypeSingle, Type = Double, Dynamic = False, Default = \"1", Scope = Public	#tag EndConstant	#tag Constant, Name = kArrayTypeString, Type = Double, Dynamic = False, Default = \"3", Scope = Public	#tag EndConstant	#tag Constant, Name = kArrayTypeUint64, Type = Double, Dynamic = False, Default = \"4", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass